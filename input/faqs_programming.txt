{"0": {"question": "Is there a source code level debugger with breakpoints, single-stepping, etc.?", "answer": "Yes."}, "1": {"question": "Is there a tool to help find bugs or perform static analysis?", "answer": "Yes."}, "2": {"question": "How can I create a stand-alone binary from a Python script?", "answer": "You don\u2019t need the ability to compile Python to C code if all you want is a\nstand-alone program that users can download and run without having to install\nthe Python distribution first.  There are a number of tools that determine the\nset of modules required by a program and bind these modules together with a\nPython binary to produce a single executable."}, "3": {"question": "Are there coding standards or a style guide for Python programs?", "answer": "Yes.  The coding style required for standard library modules is documented as\n"}, "4": {"question": "Why am I getting an UnboundLocalError when the variable has a value?", "answer": "It can be a surprise to get the UnboundLocalError in previously working\ncode when it is modified by adding an assignment statement somewhere in\nthe body of a function."}, "5": {"question": "What are the rules for local and global variables in Python?", "answer": "In Python, variables that are only referenced inside a function are implicitly\nglobal.  If a variable is assigned a value anywhere within the function\u2019s body,\nit\u2019s assumed to be a local unless explicitly declared as global."}, "6": {"question": "Why do lambdas defined in a loop with different values all return the same result?", "answer": "Assume you use a for loop to define a few different lambdas (or even plain\nfunctions), e.g.:"}, "7": {"question": "How do I share global variables across modules?", "answer": "The canonical way to share information across modules within a single program is\nto create a special module (often called config or cfg).  Just import the config\nmodule in all modules of your application; the module then becomes available as\na global name.  Because there is only one instance of each module, any changes\nmade to the module object get reflected everywhere.  For example:"}, "8": {"question": "What are the \u201cbest practices\u201d for using import in a module?", "answer": "In general, don\u2019t use "}, "9": {"question": "Why are default values shared between objects?", "answer": "This type of bug commonly bites neophyte programmers.  Consider this function:"}, "10": {"question": "How can I pass optional or keyword parameters from one function to another?", "answer": "Collect the arguments using the "}, "11": {"question": "What is the difference between arguments and parameters?", "answer": " are defined by the names that appear in a\nfunction definition, whereas "}, "12": {"question": "Why did changing list \u2018y\u2019 also change list \u2018x\u2019?", "answer": "If you wrote code like:"}, "13": {"question": "How do I write a function with output parameters (call by reference)?", "answer": "Remember that arguments are passed by assignment in Python.  Since assignment\njust creates references to objects, there\u2019s no alias between an argument name in\nthe caller and callee, and so no call-by-reference per se.  You can achieve the\ndesired effect in a number of ways."}, "14": {"question": "How do you make a higher order function in Python?", "answer": "You have two choices: you can use nested scopes or you can use callable objects.\nFor example, suppose you wanted to define "}, "15": {"question": "How do I copy an object in Python?", "answer": "In general, try "}, "16": {"question": "How can I find the methods or attributes of an object?", "answer": "For an instance x of a user-defined class, "}, "17": {"question": "How can my code discover the name of an object?", "answer": "Generally speaking, it can\u2019t, because objects don\u2019t really have names.\nEssentially, assignment always binds a name to a value; The same is true of\n"}, "18": {"question": "What\u2019s up with the comma operator\u2019s precedence?", "answer": "Comma is not an operator in Python.  Consider this session:"}, "19": {"question": "Is there an equivalent of C\u2019s \u201c?:\u201d ternary operator?", "answer": "Yes, there is. The syntax is as follows:"}, "20": {"question": "Is it possible to write obfuscated one-liners in Python?", "answer": "Yes.  Usually this is done by nesting "}, "21": {"question": "How do I specify hexadecimal and octal integers?", "answer": "To specify an octal digit, precede the octal value with a zero, and then a lower\nor uppercase \u201co\u201d.  For example, to set the variable \u201ca\u201d to the octal value \u201c10\u201d\n(8 in decimal), type:"}, "22": {"question": "Why does -22 // 10 return -3?", "answer": "It\u2019s primarily driven by the desire that "}, "23": {"question": "How do I convert a string to a number?", "answer": "For integers, use the built-in "}, "24": {"question": "How do I convert a number to a string?", "answer": "To convert, e.g., the number 144 to the string \u2018144\u2019, use the built-in type\nconstructor "}, "25": {"question": "How do I modify a string in place?", "answer": "You can\u2019t, because strings are immutable.  In most situations, you should\nsimply construct a new string from the various parts you want to assemble\nit from.  However, if you need an object with the ability to modify in-place\nunicode data, try using an "}, "26": {"question": "How do I use strings to call functions/methods?", "answer": "There are various techniques."}, "27": {"question": "Is there an equivalent to Perl\u2019s chomp() for removing trailing newlines from strings?", "answer": "You can use "}, "28": {"question": "Is there a scanf() or sscanf() equivalent?", "answer": "Not as such."}, "29": {"question": "What does \u2018UnicodeDecodeError\u2019 or \u2018UnicodeEncodeError\u2019 error  mean?", "answer": "See the "}, "30": {"question": "My program is too slow. How do I speed it up?", "answer": "That\u2019s a tough one, in general.  First, here are a list of things to\nremember before diving further:"}, "31": {"question": "What is the most efficient way to concatenate many strings together?", "answer": " and "}, "32": {"question": "How do I convert between tuples and lists?", "answer": "The type constructor "}, "33": {"question": "What\u2019s a negative index?", "answer": "Python sequences are indexed with positive numbers and negative numbers.  For\npositive numbers 0 is the first index 1 is the second index and so forth.  For\nnegative indices -1 is the last index and -2 is the penultimate (next to last)\nindex and so forth.  Think of "}, "34": {"question": "How do I iterate over a sequence in reverse order?", "answer": "Use the "}, "35": {"question": "How do you remove duplicates from a list?", "answer": "See the Python Cookbook for a long discussion of many ways to do this:"}, "36": {"question": "How do you make an array in Python?", "answer": "Use a list:"}, "37": {"question": "How do I create a multidimensional list?", "answer": "You probably tried to make a multidimensional array like this:"}, "38": {"question": "How do I apply a method to a sequence of objects?", "answer": "Use a list comprehension:"}, "39": {"question": "Why does a_tuple[i] += [\u2018item\u2019] raise an exception when the addition works?", "answer": "This is because of a combination of the fact that augmented assignment\noperators are "}, "40": {"question": "How can I get a dictionary to store and display its keys in a consistent order?", "answer": "Use "}, "41": {"question": "I want to do a complicated sort: can you do a Schwartzian Transform in Python?", "answer": "The technique, attributed to Randal Schwartz of the Perl community, sorts the\nelements of a list by a metric which maps each element to its \u201csort value\u201d. In\nPython, use the "}, "42": {"question": "How can I sort one list by values from another list?", "answer": "Merge them into an iterator of tuples, sort the resulting list, and then pick\nout the element you want."}, "43": {"question": "What is a class?", "answer": "A class is the particular object type created by executing a class statement.\nClass objects are used as templates to create instance objects, which embody\nboth the data (attributes) and code (methods) specific to a datatype."}, "44": {"question": "What is a method?", "answer": "A method is a function on some object "}, "45": {"question": "What is self?", "answer": "Self is merely a conventional name for the first argument of a method.  A method\ndefined as "}, "46": {"question": "How do I check if an object is an instance of a given class or of a subclass of it?", "answer": "Use the built-in function "}, "47": {"question": "What is delegation?", "answer": "Delegation is an object oriented technique (also called a design pattern).\nLet\u2019s say you have an object "}, "48": {"question": "How do I call a method defined in a base class from a derived class that overrides it?", "answer": "Use the built-in "}, "49": {"question": "How can I organize my code to make it easier to change the base class?", "answer": "You could define an alias for the base class, assign the real base class to it\nbefore your class definition, and use the alias throughout your class.  Then all\nyou have to change is the value assigned to the alias.  Incidentally, this trick\nis also handy if you want to decide dynamically (e.g. depending on availability\nof resources) which base class to use.  Example:"}, "50": {"question": "How do I create static class data and static class methods?", "answer": "Both static data and static methods (in the sense of C++ or Java) are supported\nin Python."}, "51": {"question": "How can I overload constructors (or methods) in Python?", "answer": "This answer actually applies to all methods, but the question usually comes up\nfirst in the context of constructors."}, "52": {"question": "I try to use __spam and I get an error about _SomeClassName__spam.", "answer": "Variable names with double leading underscores are \u201cmangled\u201d to provide a simple\nbut effective way to define class private variables.  Any identifier of the form\n"}, "53": {"question": "My class defines __del__ but it is not called when I delete the object.", "answer": "There are several possible reasons for this."}, "54": {"question": "How do I get a list of all instances of a given class?", "answer": "Python does not keep track of all instances of a class (or of a built-in type).\nYou can program the class\u2019s constructor to keep track of all instances by\nkeeping a list of weak references to each instance."}, "55": {"question": "Why does the result of ", "answer": "The "}, "56": {"question": "How do I create a .pyc file?", "answer": "When a module is imported for the first time (or when the source file has\nchanged since the current compiled file was created) a "}, "57": {"question": "How do I find the current module name?", "answer": "A module can find out its own module name by looking at the predefined global\nvariable "}, "58": {"question": "How can I have modules that mutually import each other?", "answer": "Suppose you have the following modules:"}, "59": {"question": "__import__(\u2018x.y.z\u2019) returns <module \u2018x\u2019>; how do I get z?", "answer": "Consider using the convenience function "}, "60": {"question": "When I edit an imported module and reimport it, the changes don\u2019t show up.  Why does this happen?", "answer": "For reasons of efficiency as well as consistency, Python only reads the module\nfile on the first time a module is imported.  If it didn\u2019t, in a program\nconsisting of many modules where each one imports the same basic module, the\nbasic module would be parsed and re-parsed many times.  To force re-reading of a\nchanged module, do this:"}}