{"0": {"question": "Can I create my own functions in C?", "answer": "Yes, you can create built-in modules containing functions, variables, exceptions\nand even new types in C.  This is explained in the document\n"}, "1": {"question": "Can I create my own functions in C++?", "answer": "Yes, using the C compatibility features found in C++.  Place "}, "2": {"question": "Writing C is hard; are there any alternatives?", "answer": "There are a number of alternatives to writing your own C extensions, depending\non what you\u2019re trying to do."}, "3": {"question": "How can I execute arbitrary Python statements from C?", "answer": "The highest-level function to do this is "}, "4": {"question": "How can I evaluate an arbitrary Python expression from C?", "answer": "Call the function "}, "5": {"question": "How do I extract C values from a Python object?", "answer": "That depends on the object\u2019s type.  If it\u2019s a tuple, "}, "6": {"question": "How do I use Py_BuildValue() to create a tuple of arbitrary length?", "answer": "You can\u2019t.  Use "}, "7": {"question": "How do I call an object\u2019s method from C?", "answer": "The "}, "8": {"question": "How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?", "answer": "In Python code, define an object that supports the "}, "9": {"question": "How do I access a module written in Python from C?", "answer": "You can get a pointer to the module object as follows:"}, "10": {"question": "How do I interface to C++ objects from Python?", "answer": "Depending on your requirements, there are many approaches.  To do this manually,\nbegin by reading "}, "11": {"question": "I added a module using the Setup file and the make fails; why?", "answer": "Setup must end in a newline, if there is no newline there, the build process\nfails.  (Fixing this requires some ugly shell script hackery, and this bug is so\nminor that it doesn\u2019t seem worth the effort.)"}, "12": {"question": "How do I debug an extension?", "answer": "When using GDB with dynamically loaded extensions, you can\u2019t set a breakpoint in\nyour extension until your extension is loaded."}, "13": {"question": "I want to compile a Python module on my Linux system, but some files are missing. Why?", "answer": "Most packaged versions of Python don\u2019t include the\n"}, "14": {"question": "How do I tell \u201cincomplete input\u201d from \u201cinvalid input\u201d?", "answer": "Sometimes you want to emulate the Python interactive interpreter\u2019s behavior,\nwhere it gives you a continuation prompt when the input is incomplete (e.g. you\ntyped the start of an \u201cif\u201d statement or you didn\u2019t close your parentheses or\ntriple string quotes), but it gives you a syntax error message immediately when\nthe input is invalid."}, "15": {"question": "How do I find undefined g++ symbols __builtin_new or __pure_virtual?", "answer": "To dynamically load g++ extension modules, you must recompile Python, relink it\nusing g++ (change LINKCC in the Python Modules Makefile), and link your\nextension module using g++ (e.g., "}, "16": {"question": "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?", "answer": "Yes, you can inherit from built-in classes such as "}}